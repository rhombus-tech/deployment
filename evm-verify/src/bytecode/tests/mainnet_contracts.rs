#[cfg(test)]
mod mainnet_contracts_tests {
    use crate::bytecode::analyzer::BytecodeAnalyzer;
    use ethers::types::Bytes;
    use hex_literal::hex;
    use anyhow::Result;

    // USDT (Tether) Contract Bytecode
    // This is a simplified version for testing
    const USDT_BYTECODE: &[u8] = &hex!(
        "606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bd578063095ea7b31461014c57806318160ddd146101a657806323b872dd146101cf578063313ce5671461024857806354fd4d501461027157806370a082311461030057806395d89b411461034d578063a9059cbb146103dc578063cae9ca511461043b578063dd62ed3e146104d5578063e5b5019a1461054e575b600080fd5b34156100c857600080fd5b6100d0610577565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101115780820151818401525b602081019050610100565b50505050905090810190601f16801561013e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015757600080fd5b61018c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610615565b604051808215151515815260200191505060405180910390f35b34156101b157600080fd5b6101b9610708565b6040518082815260200191505060405180910390f35b34156101da57600080fd5b61022e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061070e565b604051808215151515815260200191505060405180910390f35b341561025357600080fd5b61025b6109d9565b6040518082815260200191505060405180910390f35b341561027c57600080fd5b6102846109df565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102c55780820151818401525b6020810190506102b4565b50505050905090810190601f1680156102f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561030b57600080fd5b610337600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a7d565b6040518082815260200191505060405180910390f35b341561035857600080fd5b610360610ac7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a15780820151818401525b602081019050610390565b50505050905090810190601f1680156103ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e757600080fd5b61042160048080359060200190919080359060200190919050506103ff565b604051808215151515815260200191505060405180910390f35b341561044657600080fd5b6104bb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b65565b604051808215151515815260200191505060405180910390f35b34156104e057600080fd5b610538600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d30565b6040518082815260200191505060405180910390f35b341561055957600080fd5b610561610db7565b6040518082815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561060d5780601f106105e25761010080835404028352916020019161060d565b820191906000526020600020905b8154815290600101906020018083116105f057829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60045481565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561079b57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107e957600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482101515156108d7576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806108a15750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156108d6576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60035481565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a755780601f10610a4a57610100808354040283529160200191610a75565b820191906000526020600020905b815481529060010190602001808311610a5857829003601f168201915b505050505081565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5d5780601f10610b3257610100808354040283529160200191610b5d565b820191906000526020600020905b815481529060010190602001808311610b4057829003601f168201915b505050505081565b600082600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561064f57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482101515156106d7576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054148061069c5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156106d6576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600454905090565b"
    );

    // Uniswap V2 Router Contract Bytecode
    // This is a simplified version for testing
    const UNISWAP_V2_ROUTER_BYTECODE: &[u8] = &hex!(
        "60806040526004361061009c5760003560e01c8063ad5c464811610064578063ad5c4648146101b6578063c45a0155146101e1578063d06ca61f1461020c578063ded9382a1461024a578063e8e3370014610275578063f305d7191461029e576100e6565b80630dfe16811461010257806318cbafe5146101375780632195995c1461014c57806338ed1739146101745780634a25d94a14610189576100e6565b366100e6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100e457600080fd5b005b3480156100f257600080fd5b506100fb6102c9565b6040518082815260200191505060405180910390f35b34801561010e57600080fd5b506101176102cf565b60405180826000191660001916815260200191505060405180910390f35b34801561014357600080fd5b5061014c6102f5565b005b34801561015857600080fd5b50610161610380565b6040518082815260200191505060405180910390f35b34801561018057600080fd5b50610189610386565b005b34801561019557600080fd5b5061019e610413565b60405180826000191660001916815260200191505060405180910390f35b3480156101c257600080fd5b506101cb610439565b6040518082815260200191505060405180910390f35b3480156101ed57600080fd5b506101f661043f565b6040518082815260200191505060405180910390f35b34801561021857600080fd5b50610221610445565b60405180826000191660001916815260200191505060405180910390f35b34801561025657600080fd5b5061025f61046b565b6040518082815260200191505060405180910390f35b34801561028157600080fd5b5061028a610471565b60405180826000191660001916815260200191505060405180910390f35b3480156102aa57600080fd5b506102b3610497565b6040518082815260200191505060405180910390f35b60005481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561039f57600080fd5b505af11580156103b3573d6000803e3d6000fd5b505050506040513d60208110156103c957600080fd5b81019080805190602001909291905050509050600081111561041057600080fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015481565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000548156fea165627a7a72305820a8f9f1f4815c1eedfb8df31298a5cd05f8f1c0aeb1477e9cfd4c0f127b5d7b9e0029"
    );

    #[test]
    fn test_usdt_contract() -> Result<()> {
        println!("Testing USDT Contract Bytecode Analysis");
        
        let bytecode = Bytes::from(USDT_BYTECODE.to_vec());
        let mut analyzer = BytecodeAnalyzer::new(bytecode);
        
        // We want to see the full analysis, so don't use test mode
        analyzer.set_test_mode(false);
        
        let analysis = analyzer.analyze()?;
        
        // Print some basic stats
        println!("Analysis Results:");
        println!("- Code Length: {} bytes", analysis.runtime.code_length);
        println!("- Memory Accesses: {}", analysis.memory_accesses.len());
        println!("- Warnings: {}", analysis.warnings.len());
        println!("- Delegate Calls: {}", analysis.delegate_calls.len());
        
        // Print warnings if any
        if !analysis.warnings.is_empty() {
            println!("\nWarnings:");
            for warning in &analysis.warnings {
                println!("  - {}", warning);
            }
        }
        
        // Basic assertions to verify the analysis worked
        assert!(analysis.runtime.code_length > 0);
        
        Ok(())
    }

    #[test]
    fn test_uniswap_v2_router_contract() -> Result<()> {
        println!("Testing Uniswap V2 Router Contract Bytecode Analysis");
        
        let bytecode = Bytes::from(UNISWAP_V2_ROUTER_BYTECODE.to_vec());
        let mut analyzer = BytecodeAnalyzer::new(bytecode);
        
        // We want to see the full analysis, so don't use test mode
        analyzer.set_test_mode(false);
        
        let analysis = analyzer.analyze()?;
        
        // Print some basic stats
        println!("Analysis Results:");
        println!("- Code Length: {} bytes", analysis.runtime.code_length);
        println!("- Memory Accesses: {}", analysis.memory_accesses.len());
        println!("- Warnings: {}", analysis.warnings.len());
        println!("- Delegate Calls: {}", analysis.delegate_calls.len());
        
        // Print warnings if any
        if !analysis.warnings.is_empty() {
            println!("\nWarnings:");
            for warning in &analysis.warnings {
                println!("  - {}", warning);
            }
        }
        
        // Basic assertions to verify the analysis worked
        assert!(analysis.runtime.code_length > 0);
        
        Ok(())
    }
}
